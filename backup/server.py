from flask import Flask, render_template, Response, request
import cv2
import threading
import time
import os
from datetime import datetime

app = Flask(__name__)

# Initialize the webcam
camera = cv2.VideoCapture(0)

# Variables to control recording
recording = False
out = None
recording_lock = threading.Lock()

# Directory to store recordings
output_dir = "recordings"
os.makedirs(output_dir, exist_ok=True)  # Ensure the directory exists


# Function to record video
def record_video():
    global recording, out
    while recording:
        with recording_lock:
            success, frame = camera.read()
            if success and out:
                out.write(frame)
        time.sleep(0.03)  # Approx. 30 FPS


def generate_frames():
    while True:
        success, frame = camera.read()
        if not success:
            break
        else:
            # Encode the frame as JPEG
            ret, buffer = cv2.imencode(".jpg", frame)
            frame = buffer.tobytes()

            # Yield the frame in a byte format compatible with the browser
            yield (b"--frame\r\n" b"Content-Type: image/jpeg\r\n\r\n" + frame + b"\r\n")


@app.route("/")
def index():
    # Render an HTML template
    return render_template("index.html")


@app.route("/video_feed")
def video_feed():
    # Return the response generated by the generate_frames function
    return Response(
        generate_frames(), mimetype="multipart/x-mixed-replace; boundary=frame"
    )


@app.route("/start_recording", methods=["POST"])
def start_recording():
    global recording, out
    if not recording:
        # Generate filename with current date and time
        timestamp = datetime.now().strftime("%Y%m%d%H%M%S%f")[:-3]  # Up to milliseconds
        filename = os.path.join(output_dir, f"w{timestamp}.mp4")

        # Initialize VideoWriter
        fourcc = cv2.VideoWriter_fourcc(*"mp4v")  # Specify MP4 codec
        frame_width = int(camera.get(cv2.CAP_PROP_FRAME_WIDTH))
        frame_height = int(camera.get(cv2.CAP_PROP_FRAME_HEIGHT))
        out = cv2.VideoWriter(filename, fourcc, 20.0, (frame_width, frame_height))

        recording = True
        threading.Thread(target=record_video).start()
        return "Recording started."
    return "Already recording."


@app.route("/stop_recording", methods=["POST"])
def stop_recording():
    global recording, out
    if recording:
        with recording_lock:
            recording = False
            if out:
                out.release()
                out = None
        return "Recording stopped."
    return "Not recording."


if __name__ == "__main__":
    app.run(debug=True)
